{"version":3,"sources":["img/quero.jpeg","sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","getMergeSortAnimations","array","animations","auxillaryArray","slice","mergeSort","startIndex","endIndex","middleIndex","Math","floor","sortArray","i","j","push","length","merge","javaScriptSortedArray","sort","a","b","console","log","firstArray","secondArray","arraysAreEqual","WINDOW_WIDTH","window","innerWidth","WINDOW_HEIGHT","innerHeight","NUMBER_OF_ARRAY_BARS","parseInt","onresize","SortingVisualizer","props","state","this","resetArray","randomIntFromInterval","setState","isColorChange","arrayBars","document","getElementsByClassName","barOneIndex","barTwoIndex","color","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","barOneIdx","newHeight","height","mergeSortedArray","className","onClick","quickSort","heapSort","bubbleSort","map","value","idx","key","React","Component","min","max","random","arrayOne","arrayTwo","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.760cbf01.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/quero.ba3d3ed7.jpeg\";","export function getMergeSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    mergeSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction mergeSort(auxillaryArray, startIndex, endIndex, animations) {\r\n    if(startIndex === endIndex)\r\n        return;\r\n    const middleIndex = Math.floor((startIndex + endIndex)/2);\r\n    mergeSort(auxillaryArray, startIndex, middleIndex, animations);\r\n    mergeSort(auxillaryArray, middleIndex + 1, endIndex, animations);\r\n    merge(auxillaryArray, startIndex, middleIndex, endIndex, animations);\r\n}\r\n\r\nfunction merge(auxillaryArray, startIndex, middleIndex, endIndex, animations) {\r\n    let sortArray = [];\r\n    let i = startIndex;\r\n    let j = middleIndex + 1;\r\n    while(i <= middleIndex && j <= endIndex) {\r\n        //Comparing value at ith and jth index so push them to change their color\r\n        animations.push([i, j]);\r\n        //By changing color we imply that we are comparing those two values and then again we should revert back to their original color so push them again\r\n        animations.push([i, j]);\r\n        if(auxillaryArray[i] <= auxillaryArray[j]) {\r\n            //We should overwrite the value at (i+startIndex)th index with ith index so push them to highlight swap their heights\r\n            animations.push([sortArray.length + startIndex, auxillaryArray[i]]);\r\n            sortArray.push(auxillaryArray[i++]);\r\n        }\r\n        else {\r\n            //We should overwrite the value at (i+startIndex)th index with jth index so push them to highlight swap their heights\r\n            animations.push([sortArray.length + startIndex, auxillaryArray[j]]);\r\n            sortArray.push(auxillaryArray[j++]);\r\n        }\r\n    }\r\n    while(i <= middleIndex) {\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n        animations.push([sortArray.length + startIndex, auxillaryArray[i]]);\r\n        sortArray.push(auxillaryArray[i++]);\r\n    }\r\n    while(j <= endIndex) {\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n        animations.push([sortArray.length + startIndex, auxillaryArray[j]]);\r\n        sortArray.push(auxillaryArray[j++]);\r\n    }\r\n    for (let i = startIndex; i <= endIndex; i++) {\r\n        auxillaryArray[i] = sortArray[i - startIndex];\r\n    }\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}","import React from 'react';\r\nimport './SortingVisualizer.css';\r\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\n// import {getHeapSortAnimations} from '../SortingAlgorithms/HeapSort';\r\n// import {getQuickSortAnimations} from '../SortingAlgorithms/QuickSort';\r\n// import {getInsertionSortAnimations} from '../SortingAlgorithms/InsertionSort';\r\n// import {getSelectionSortAnimations} from '../SortingAlgorithms/SelectionSort';\r\n// import {getBubbleSortAnimations} from '../SortingAlgorithms/BubbleSort';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 10;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\n\r\n//Changing width,height accordingly with the browser\r\nlet WINDOW_WIDTH = window.innerWidth;\r\nlet WINDOW_HEIGHT = window.innerHeight;\r\nlet NUMBER_OF_ARRAY_BARS = parseInt((WINDOW_WIDTH - 50)/8);\r\n\r\nfunction reportWindowSize() {\r\n    WINDOW_WIDTH =  window.innerWidth;\r\n    WINDOW_HEIGHT = window.innerHeight;\r\n    NUMBER_OF_ARRAY_BARS = parseInt((WINDOW_WIDTH - 50)/8);\r\n}\r\n\r\nwindow.onresize = reportWindowSize;\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(25, WINDOW_HEIGHT-50));\r\n    }\r\n    this.setState({array});\r\n  }\r\n\r\n    mergeSort() {\r\n        const [animations,sortArray] = getMergeSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = (i % 3 !== 2);\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const [barOneIndex, barTwoIndex] = animations[i];\r\n                const color = (i % 3 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                //If we don't multiply by the index then every animations[i] wait for exactly ANIMATION_SPEED_MS and immediately change into final state\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                  },i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n        // this.setState({array: sortArray})\r\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\r\n    }\r\n\r\n  quickSort() {\r\n    // We leave it as an exercise to the viewer of this code to implement this method.\r\n  }\r\n\r\n  heapSort() {\r\n    // We leave it as an exercise to the viewer of this code to implement this method.\r\n  }\r\n\r\n  bubbleSort() {\r\n    // We leave it as an exercise to the viewer of this code to implement this method.\r\n  }\r\n\r\n  // NOTE: This method will only work if your sorting algorithms actually return\r\n  // the sorted arrays; if they return the animations (as they currently do), then\r\n  // this method will be broken.\r\n  testSortingAlgorithms() {\r\n    for (let i = 0; i < 100; i++) {\r\n      const array = [];\r\n      const length = randomIntFromInterval(1, 1000);\r\n      for (let i = 0; i < length; i++) {\r\n        array.push(randomIntFromInterval(-1000, 1000));\r\n      }\r\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\r\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {array} = this.state;\r\n\r\n    return ([\r\n      <div className=\"array\">\r\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\r\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n      </div>,\r\n      <div className=\"array-container\">\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n            }}></div>\r\n        ))}\r\n\r\n      </div>\r\n    ]);\r\n  }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}","import React from 'react';\nimport profileImage from './img/quero.jpeg'\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\n\n      // <h1>Visualizer App based from<a href=\"https://clementmihailescu.github.io/Sorting-Visualizer/\">Clement Mihailescu's sorting-visualizer</a> </h1>\n      // <h2>My React App</h2>\n      // <img src={profileImage} alt=\"profile-image\" />\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}